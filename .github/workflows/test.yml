name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests every day at 2 AM
    - cron: '0 2 * * *'

jobs:
  frontend-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint
    
    - name: Run unit tests
      working-directory: ./frontend
      run: npm test -- --coverage --run
    
    - name: Run integration tests
      working-directory: ./frontend
      run: npm test -- --run src/__tests__/integration
    
    - name: Build application
      working-directory: ./frontend
      run: npm run build
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-coverage

  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Setup test database
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
      run: |
        npm run migrate:test
        npm run seed:test
    
    - name: Run linting
      working-directory: ./backend
      run: npm run lint
    
    - name: Run unit tests
      working-directory: ./backend
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
      run: npm test -- --coverage
    
    - name: Run API tests
      working-directory: ./backend
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
      run: npm run test:api
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/coverage
        flags: backend
        name: backend-coverage

  e2e-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Install Playwright
      working-directory: ./e2e-tests
      run: |
        npm init -y
        npm install --save-dev @playwright/test
        npx playwright install --with-deps
    
    - name: Setup test database
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
      run: |
        npm run migrate:test
        npm run seed:test
    
    - name: Start backend server
      working-directory: ./backend
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        JWT_SECRET: test-secret
        PORT: 3001
      run: |
        npm run dev &
        sleep 5
    
    - name: Start frontend server
      working-directory: ./frontend
      env:
        VITE_API_URL: http://localhost:3001/api/v1
      run: |
        npm run dev &
        sleep 5
    
    - name: Run E2E tests
      working-directory: ./e2e-tests
      run: npx playwright test
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: playwright-report
        path: e2e-tests/playwright-report/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
    
    - name: Run frontend security audit
      working-directory: ./frontend
      run: |
        npm audit --audit-level=high
        npm audit fix --force || true
    
    - name: Run backend security audit
      working-directory: ./backend
      run: |
        npm audit --audit-level=high
        npm audit fix --force || true
    
    - name: Run OWASP dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'TrainingPulse'
        path: '.'
        format: 'HTML'
    
    - name: Upload dependency check results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/

  performance-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:5173
        uploadArtifacts: true
        temporaryPublicStorage: true

  notify:
    needs: [frontend-tests, backend-tests, e2e-tests, security-scan, performance-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Send notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Test Suite Results:
          - Frontend: ${{ needs.frontend-tests.result }}
          - Backend: ${{ needs.backend-tests.result }}
          - E2E: ${{ needs.e2e-tests.result }}
          - Security: ${{ needs.security-scan.result }}
          - Performance: ${{ needs.performance-tests.result }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()